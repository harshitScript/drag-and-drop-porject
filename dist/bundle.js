(()=>{"use strict";function t(t,e,n){var r=n.value;return{configurable:!0,get:function(){return r.bind(this)}}}var e;!function(t){t[t.ACTIVE=0]="ACTIVE",t[t.FINISHED=1]="FINISHED"}(e||(e={}));var n,r=function(t,e,n,r,o){this.id=t,this.title=e,this.description=n,this.people=r,this.status=o},o=(n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},n(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),i=function(t){function n(){var e=t.call(this)||this;return e.projects=[],e}return o(n,t),n.getInstance=function(){return this.instance||(this.instance=new n),this.instance},n.prototype.addProject=function(t,n,o){var i=new r(Math.random().toString(),t,n,o,e.ACTIVE);this.projects.push(i),this.updateListeners()},n.prototype.moveProject=function(t,e){var n=this.projects.find((function(e){return e.id===t}));n&&n.status!==e&&(n.status=e,this.updateListeners())},n.prototype.updateListeners=function(){for(var t=0,e=this.listeners;t<e.length;t++)(0,e[t])(this.projects.slice())},n}(function(){function t(){this.listeners=[]}return t.prototype.addListener=function(t){this.listeners.push(t)},t}()).getInstance();function l(t){var e=!0;return t.required&&(e=e&&0!==t.value.toString().trim().length),null!=t.maxLength&&(e=e&&t.value.toString().length<=t.maxLength),null!=t.minLength&&(e=e&&t.value.toString().length>=t.minLength),null!=t.max&&(e=e&&"number"==typeof t.value&&t.value<=t.max),null!=t.min&&(e=e&&"number"==typeof t.value&&t.value>=t.min),e}const a=function(){function t(t,e,n,r){this.templateElement=document.getElementById(t),this.hostElement=document.getElementById(e);var o=document.importNode(this.templateElement.content,!0);this.element=o.firstElementChild,r&&(this.element.id=r),this.attach(n)}return t.prototype.attach=function(t){this.hostElement.insertAdjacentElement(t?"afterbegin":"beforeend",this.element)},t}();var c=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),s=function(e){function n(){var t=e.call(this,"project-input","app",!0)||this;return t.titleInputElement=t.element.querySelector("#title"),t.descriptionInputElement=t.element.querySelector("#description"),t.peopleInputElement=t.element.querySelector("#people"),t.configure(),t}return c(n,e),n.prototype.configure=function(){this.element.addEventListener("submit",this.submitHandler)},n.prototype.renderContent=function(){},n.prototype.submitHandler=function(t){t.preventDefault();var e=this.gatherUserInput();if(Array.isArray(e)){var n=e[0],r=e[1],o=e[2];i.addProject(n,r,o),this.clearInputs()}},n.prototype.gatherUserInput=function(){var t=this.titleInputElement.value,e=this.descriptionInputElement.value,n=this.peopleInputElement.value,r={value:e,required:!0,minLength:10,maxLength:50},o={value:+n,required:!0,min:1,max:10};if(l({value:t,required:!0,minLength:1,maxLength:15})&&l(r)&&l(o))return[t,e,+n];alert("Invalid input, please try again!")},n.prototype.clearInputs=function(){this.titleInputElement.value="",this.descriptionInputElement.value="",this.peopleInputElement.value=""},function(t,e,n,r){var o,i=arguments.length,l=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(t,e,n,r);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(l=(i<3?o(l):i>3?o(e,n,l):o(e,n))||l);i>3&&l&&Object.defineProperty(e,n,l)}([t],n.prototype,"submitHandler",null),n}(a),u=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),p=function(t,e,n,r){var o,i=arguments.length,l=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(t,e,n,r);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(l=(i<3?o(l):i>3?o(e,n,l):o(e,n))||l);return i>3&&l&&Object.defineProperty(e,n,l),l},f=function(e){function n(t,n){var r=e.call(this,"single-project",t,!1,n.id)||this;return r.project=n,r.configure(),r.renderContent(),r}return u(n,e),Object.defineProperty(n.prototype,"peopleAssignedText",{get:function(){return this.project.people>1?"".concat(this.project.people," persons assigned"):"1 person assigned"},enumerable:!1,configurable:!0}),n.prototype.dragStartHandler=function(t){t.dataTransfer.setData("text/plain",this.project.id),t.dataTransfer.effectAllowed="move"},n.prototype.dragEndHandler=function(t){console.log("The drag ended!")},n.prototype.configure=function(){this.element.addEventListener("dragstart",this.dragStartHandler),this.element.addEventListener("dragend",this.dragEndHandler)},n.prototype.renderContent=function(){this.element.querySelector("h2").textContent=this.project.title,this.element.querySelector("h3").textContent=this.peopleAssignedText,this.element.querySelector("p").textContent=this.project.description},p([t],n.prototype,"dragStartHandler",null),p([t],n.prototype,"dragEndHandler",null),n}(a),d=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),h=function(t,e,n,r){var o,i=arguments.length,l=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(t,e,n,r);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(l=(i<3?o(l):i>3?o(e,n,l):o(e,n))||l);return i>3&&l&&Object.defineProperty(e,n,l),l},y=function(n){function r(t){var e=n.call(this,"project-list","app",!1,"".concat(t,"-projects"))||this;return e.type=t,e.assignedProjects=[],e.configure(),e.renderContent(),e}return d(r,n),r.prototype.configure=function(){var t=this;this.element.querySelector("ul").addEventListener("dragover",this.dragOverHandler),this.element.querySelector("ul").addEventListener("drop",this.dropHandler),this.element.querySelector("ul").addEventListener("dragleave",this.dragLeaveHandler),i.addListener((function(n){var r=n.filter((function(n){return"active"===t.type?n.status===e.ACTIVE:n.status===e.FINISHED}));t.assignedProjects=r,t.renderProjects()}))},r.prototype.dragOverHandler=function(t){t.dataTransfer&&"text/plain"===t.dataTransfer.types[0]&&(t.preventDefault(),this.element.querySelector("ul").classList.add("droppable"))},r.prototype.dropHandler=function(t){i.moveProject(t.dataTransfer.getData("text/plain"),"active"===this.type?e.ACTIVE:e.FINISHED)},r.prototype.dragLeaveHandler=function(t){this.element.querySelector("ul").classList.remove("droppable")},r.prototype.renderContent=function(){var t="".concat(this.type,"-projects-list");this.element.querySelector("ul").id=t,this.element.querySelector("h2").textContent="".concat(this.type.toUpperCase()," PROJECTS")},r.prototype.renderProjects=function(){var t=document.getElementById("".concat(this.type,"-projects-list"));t.innerHTML="";for(var e=0,n=this.assignedProjects;e<n.length;e++){var r=n[e];new f(t.id,r)}},h([t],r.prototype,"dragOverHandler",null),h([t],r.prototype,"dropHandler",null),h([t],r.prototype,"dragLeaveHandler",null),r}(a);new s,new y("active"),new y("finished")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,